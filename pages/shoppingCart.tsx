import {
  Button,
  Card,
  Grid,
  Link,
  List,
  ListItem,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
} from '@mui/material';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import NextLink from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';
import Layout from '../components/Layout';
import styles from '../styles/Home.module.css';
import { getParsedCookie, setParsedCookie } from '../util/cookies';
import { getProducts } from '../util/database';

type Product = {
  id: number;
  type: string;
  price: number;
};

type addedProducts = {
  id: number;
  amount: number;
  name: string;
};

type Props = {
  products: Product[];
};

export default function ShoppingCart(props: Props) {
  const cartItems = getParsedCookie('addedProducts') || [];
  const [cart, setCart] = useState(cartItems);
  const router = useRouter();

  // calculate total price
  const productPrice = props.products.map((product) => product.price / 100);

  // delete item from cart
  const deleteFromCart = (id: number) => {
    const newCookie = cart.filter((cookieObject: addedProducts) => {
      return cookieObject.id !== id;
    });

    setCart(newCookie);
    setParsedCookie('addedProducts', newCookie);

    // router.push(`/productList`);
  };

  return (
    <Layout>
      <div className={styles.container}>
        <Head>
          <title>Shopping Cart</title>
          <meta name="description" content="Generated by create next app" />
        </Head>

        {cartItems.length === 0 ? (
          <div>
            Your Cart is empty.{' '}
            <NextLink href="/productList">Go shopping</NextLink>
          </div>
        ) : (
          <Grid container spacing={18}>
            <Grid item md={8} xs={12} ml={5} mt={15}>
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell />
                      <TableCell>Product</TableCell>
                      <TableCell align="right">Amount</TableCell>
                      <TableCell align="right">Price</TableCell>
                      <TableCell align="right">Delete Item</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {cartItems.map((product: addedProducts) => (
                      <TableRow key={product.id}>
                        <TableCell>
                          <NextLink href={`/products/${product.id}`} passHref>
                            <Image
                              src={`/images/${product.id}.png`}
                              alt={product.name}
                              width="100"
                              height="100"
                            />
                          </NextLink>
                        </TableCell>

                        <TableCell>
                          <NextLink
                            href={`/products/${product.id}`}
                            passHref
                            data-test-id={`cart-product-${product.id}`}
                          >
                            <Link>
                              <Typography>{product.name}</Typography>
                            </Link>
                          </NextLink>
                        </TableCell>

                        <TableCell align="right">
                          <Typography>{product.amount}</Typography>
                        </TableCell>

                        <TableCell align="right">
                          €{product.amount * productPrice[product.id - 1]}
                        </TableCell>

                        <TableCell align="right">
                          <Button
                            variant="contained"
                            color="warning"
                            data-test-id={`cart-product-remove-${product.id}`}
                            onClick={() => deleteFromCart(product.id)}
                          >
                            Remove
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </Grid>

            <Grid item md={3} xs={12} mt={24}>
              <Card>
                <List>
                  <ListItem>
                    <Typography variant="h6" data-test-id="cart-total">
                      Total (
                      {cartItems.reduce(
                        (a: number, c: addedProducts) => a + c.amount,
                        0,
                      )}{' '}
                      items) : €
                      {cartItems.reduce(
                        (a: number, c: addedProducts) =>
                          a + c.amount * productPrice[c.id - 1],
                        0,
                      )}
                    </Typography>
                  </ListItem>

                  <ListItem>
                    <Link href="/checkout">
                      <Button
                        variant="contained"
                        color="success"
                        fullWidth
                        data-test-id="cart-checkout"
                      >
                        Check Out
                      </Button>
                    </Link>
                  </ListItem>
                </List>
              </Card>
            </Grid>
          </Grid>
        )}
      </div>
    </Layout>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const products = await getProducts();
  const addedProductsOnCookies = context.req.cookies.addedProducts || '[   ]';
  console.log('db', products);
  // if there is no addedProducts cookie on the browser we store to an [] otherwise we get the cookie value and parse it
  const addedProducts = JSON.parse(addedProductsOnCookies);
  // Important:
  // - Always return an object from getServerSideProps
  // - Always return a key in that object that is
  // called props

  // 1. get the cookies from the browser
  // 2. pass the cookies to the frontend
  return {
    props: {
      // In the props object, you can pass back
      // whatever information you want
      products: products,
      addedProducts: addedProducts,
    },
  };
}
